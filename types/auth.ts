// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.1
//   protoc               v5.27.3
// source: auth.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export interface Empty {
}

export interface GetInfoUserByIdRequest {
  userId: string;
}

export interface GetInfoUserByEmailRequest {
  email: string;
}

export interface GetInfoUserResponse {
  firstName: string;
  lastName: string;
  email: string;
}

export interface AuthServiceClient {
  getInfoById(request: GetInfoUserByIdRequest): Observable<GetInfoUserResponse>;

  getInfoByEmail(request: GetInfoUserByEmailRequest): Observable<GetInfoUserResponse>;
}

export interface AuthServiceController {
  getInfoById(
    request: GetInfoUserByIdRequest,
  ): Promise<GetInfoUserResponse> | Observable<GetInfoUserResponse> | GetInfoUserResponse;

  getInfoByEmail(
    request: GetInfoUserByEmailRequest,
  ): Promise<GetInfoUserResponse> | Observable<GetInfoUserResponse> | GetInfoUserResponse;
}

export function AuthServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["getInfoById", "getInfoByEmail"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("AuthService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("AuthService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const AUTH_SERVICE_NAME = "AuthService";
