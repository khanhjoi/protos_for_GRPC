// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.1
//   protoc               v5.27.3
// source: auth.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export interface Empty {
}

export interface GetUserByIdRequest {
  userId: string;
}

export interface GetUserByEmailRequest {
  email: string;
}

export interface ValidTokenRequest {
  token: string;
}

export interface GetUserResponse {
  user: User | undefined;
}

export interface ValidTokenResponse {
  payload: Payload | undefined;
}

export interface Payload {
  sub: string;
  roleId: string;
}

export interface User {
  id: string;
  firstName: string;
  lastName: string;
  email: string;
  createdAt: string;
  role: Role | undefined;
}

export interface Role {
  id: string;
  title: string;
  permissions: Permission[];
}

export interface Permission {
  id: string;
  title: string;
  action: string;
  subject: string;
}

export interface AuthServiceClient {
  getInfoById(request: GetUserByIdRequest): Observable<GetUserResponse>;

  getInfoByEmail(request: GetUserByEmailRequest): Observable<GetUserResponse>;

  checkValidToken(request: ValidTokenRequest): Observable<ValidTokenResponse>;
}

export interface AuthServiceController {
  getInfoById(request: GetUserByIdRequest): Promise<GetUserResponse> | Observable<GetUserResponse> | GetUserResponse;

  getInfoByEmail(
    request: GetUserByEmailRequest,
  ): Promise<GetUserResponse> | Observable<GetUserResponse> | GetUserResponse;

  checkValidToken(
    request: ValidTokenRequest,
  ): Promise<ValidTokenResponse> | Observable<ValidTokenResponse> | ValidTokenResponse;
}

export function AuthServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["getInfoById", "getInfoByEmail", "checkValidToken"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("AuthService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("AuthService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const AUTH_SERVICE_NAME = "AuthService";
